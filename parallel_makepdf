#!/bin/python3

# 2024.11.12, by @zachleach

from PIL import Image
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import glob
from concurrent.futures import ProcessPoolExecutor
import multiprocessing
from functools import lru_cache

output_dir = 'output'
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Known aspect ratio for 1490x2080 images
aspect = 1490/2080

def create_single_page_pdf(page_data):
    page_number, image_paths = page_data
    output_dir = 'output'
    output_pdf = os.path.join(output_dir, f'deck_page_{page_number}.pdf')
    
    c = canvas.Canvas(output_pdf, pagesize=letter)
    page_width, page_height = letter
    
    pixel_gap = 1
    
    # Calculate total grid size
    grid_width = (1490 * 3) + (pixel_gap * 2)  # 3 cards wide plus gaps
    grid_height = (2080 * 3) + (pixel_gap * 2)  # 3 cards tall plus gaps
    
    # Scale grid to fit page while maintaining aspect ratio
    scale = min(page_width * 0.9 / grid_width, page_height * 0.9 / grid_height)
    
    cell_width = 1490 * scale
    cell_height = 2080 * scale
    
    # Calculate margins to center the grid
    margin_x = (page_width - (cell_width * 3 + pixel_gap * 2)) / 2
    margin_y = (page_height - (cell_height * 3 + pixel_gap * 2)) / 2
    
    for row in range(3):
        for col in range(3):
            img_index = row * 3 + col
            if img_index >= len(image_paths) or image_paths[img_index] is None:
                continue
                
            x = margin_x + col * (cell_width + pixel_gap)
            y = margin_y + (2 - row) * (cell_height + pixel_gap)
            
            c.drawImage(image_paths[img_index], x, y, cell_width, cell_height)
    
    c.save()
    return output_pdf



def create_parallel_pdfs(image_dir):
    images = sorted(glob.glob(os.path.join(image_dir, "*.png")))
    worker_count = max(1, multiprocessing.cpu_count() - 1)
    
    # Group images directly into pages of 9
    page_data = [(i//9, images[i:i+9]) for i in range(0, len(images), 9)]
    
    with ProcessPoolExecutor(max_workers=worker_count) as executor:
        pdf_files = list(executor.map(create_single_page_pdf, page_data))
    
    return pdf_files




from pypdf import PdfWriter
import math

def merge_pdfs_into_four(pdf_files):
    total_pages = len(pdf_files)
    base_size = math.ceil(total_pages / 4)
    
    # Calculate sizes for each output PDF
    sizes = [base_size] * 3
    sizes.append(total_pages - sum(sizes))
    
    current_index = 0
    for i, size in enumerate(sizes):
        writer = PdfWriter()
        
        # Add pages to current writer
        for j in range(size):
            if current_index < len(pdf_files):
                writer.append(pdf_files[current_index])
                current_index += 1
        
        # Write merged PDF and close the file
        with open(f'{output_dir}/combined_part_{i+1}.pdf', 'wb') as output_file:
            writer.write(output_file)
        writer.close()

def test_single_page(image_dir):
    import glob
    import os
    
    # Get all PNG files from a directory
    images = sorted(glob.glob(os.path.join(image_dir, "*.png")))
    
    # Take first 9 images (or fewer if less than 9 exist)
    test_images = images[:9]
    
    # Pad with None if fewer than 9 images
    while len(test_images) < 9:
        test_images.append(None)
    
    # Create the page_data tuple
    page_data = (0, test_images)
    
    # Call the function
    output_path = create_single_page_pdf(page_data)
    print(f"Found {len(images)} images total")
    print(f"Using {len([x for x in test_images if x is not None])} images for test")
    print(f"PDF created at: {output_path}")

if __name__ == '__main__':
    import sys
    src = 'input' if len(sys.argv) < 2 else sys.argv[1]
    #pdf_files = create_parallel_pdfs(f'{src}')
    #merge_pdfs_into_four(pdf_files)
    test_single_page(f'{src}')


