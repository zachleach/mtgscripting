#!/bin/python3

# 2024.11.05, by @zachleach

from PIL import Image
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import glob
from concurrent.futures import ThreadPoolExecutor



def create_card_pdf_4(image_dir, output_pdf):
    c = canvas.Canvas(output_pdf, pagesize=A4)
    width, height = A4
    quad_width, quad_height = width/2, height/2
    
    images = sorted(glob.glob(os.path.join(image_dir, "*.png")))
    
    # Parallel image preprocessing
    with ThreadPoolExecutor() as executor:
        image_data = list(executor.map(preprocess_image, images))
    
    for i in range(0, len(image_data), 4):
        quad_images = image_data[i:i+4]
        if not quad_images:
            break
            
        positions = [(0, height-quad_height), (quad_width, height-quad_height),
                    (0, 0), (quad_width, 0)]
        
        for (img_file, aspect), (x, y) in zip(quad_images, positions):
            draw_width = quad_width * 0.9
            draw_height = draw_width / aspect
            if draw_height > quad_height * 0.9:
                draw_height = quad_height * 0.9
                draw_width = draw_height * aspect
                
            x_offset = x + (quad_width - draw_width) / 2
            y_offset = y + (quad_height - draw_height) / 2
            c.drawImage(img_file, x_offset, y_offset, draw_width, draw_height)
        
        c.showPage()
    c.save()


def preprocess_image(img_path):
    img = Image.open(img_path)
    aspect = img.width / img.height
    return img_path, aspect


def create_card_pdf_new(image_dir, output_pdf):
    c = canvas.Canvas(output_pdf, pagesize=A4)
    width, height = A4
    
    # Define pixel gap and small margin
    pixel_gap = 1
    margin = pixel_gap * 6  # Small margin at top and bottom
    
    # Adjust usable height and cell dimensions
    usable_height = height - 2 * margin
    cell_width = (width - 2 * pixel_gap) / 3
    cell_height = (usable_height - 2 * pixel_gap) / 3
    
    images = sorted(glob.glob(os.path.join(image_dir, "*.png")))
    
    with ThreadPoolExecutor() as executor:
        image_data = list(executor.map(preprocess_image, images))
    
    for i in range(0, len(image_data), 9):
        page_images = image_data[i:i+9]
        if not page_images:
            break
            
        positions = [
            (0, margin + 2*cell_height + 2*pixel_gap), 
            (cell_width + pixel_gap, margin + 2*cell_height + 2*pixel_gap), 
            (2*cell_width + 2*pixel_gap, margin + 2*cell_height + 2*pixel_gap),
            (0, margin + cell_height + pixel_gap), 
            (cell_width + pixel_gap, margin + cell_height + pixel_gap), 
            (2*cell_width + 2*pixel_gap, margin + cell_height + pixel_gap),
            (0, margin), 
            (cell_width + pixel_gap, margin), 
            (2*cell_width + 2*pixel_gap, margin)
        ]
        
        for (img_file, aspect), (x, y) in zip(page_images, positions):
            draw_width = cell_width
            draw_height = draw_width / aspect
            
            if draw_height > cell_height:
                draw_height = cell_height
                draw_width = draw_height * aspect
            
            # Center the image in the cell
            x_offset = x + (cell_width - draw_width) / 2
            y_offset = y + (cell_height - draw_height) / 2
            
            c.drawImage(img_file, x_offset, y_offset, draw_width, draw_height)
        
        c.showPage()
        print(f'Finished page: {i}')
    c.save()


import sys
src = 'input' if len(sys.argv) < 2 else sys.argv[1]


create_card_pdf_new(f'{src}', f'deck.pdf')
